		Pointers
int n = 50;
int *p = &n;

hexadecimal starts with 0x
pointers takes 8 bites
pointers stores a number (adress of value - int)
___________________________________________
		String 
string s = "HI!"
s -> is a pointer points at the address of H
the "" terminates the string with that null character \0
string s is actually a -> char *s
char *s = "HI!"
U don't need the #inclde <cs50.h> to use char *
___________________________________________
	    Pointer Arithmetic
string s="HI!";
char *s = "HI!";
printf("%C",s[0]);    =    printf("%C",*s);
printf("%C",s[1]);    =    printf("%C",*(s + 1));
___________________________________________
مينفعش أقارن بين اتنين سترينج بالطريقة العادية دي
char *s = get_string("s: ");
char *t = get_string("t: ");

if (s==t)
    printf("Same\n);
else
    printf("Different\n");
__
لازم استعمل strcmp
#include <string.h>

char *s = get_string("s: ");
char *t = get_string("t: ");

if (strcmp(s, t) == 0)
    printf("Same\n");
else
    printf("Different\n");
__
الطريقة الصحيحة لفصل ال s,t
بحيث أقدر أعدل على واحد بس منهم
	malloc()
malloc -> بترجع عنوان أول عنصر من العناصر
free -> بستعملها بعد ما أخلص ال malloc
malloc uses heap
functions with variables uses stack

#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void)
{
   char *s = get_string("s: ");
   if (s == NULL)
        return 1;

   char *t = malloc(strlen(s) + 1;
   if (t == NULL)
        return 1;

   for (int i = 0, n = strlen(s); i <= n; i++) -- ممكن أستبدلها بالجزء اللي تحت
       t[i] = s[i];

   if(strlen(t) > 0)
       t[0] = toupper(t[0]);

   printf("%s\n, s);
   printf("%s\n, t);

   free(t);
   return(0);
} 
__
بدل ال for
strcpy(destination,source);
strcpy(t, s);
___________________________________________
NULL -> The Address 0
____
To Create an array with malloc

int *x = malloc(3 * sizeof(int));
x[0] = 72;
x[1] = 73;
x[2] = 33;
free(x);
___
you can run the command   valgrind ./project_name
in terminal to see details about memory
__________
		Files

FILE *file = fopen("phonebook.csv", "a");
if (file == NULL)
{
    return 1;
}

frintf(file, "%s%s\n", name, number);
fclose(file);
____
fread() -> Tells you how many bytes were successfully read
to copy from file:

FILE *src = fopen(argv[1], "rb";
FILE *dst = fopen(argv[2], "wb";

BYTE b;

while (fread(&b, sizeof(b), 1, src) != 0)
{
    fwrite(&b, sizeof(b), 1,dst);
}

fclose(dst);
fclose(src);
___________






